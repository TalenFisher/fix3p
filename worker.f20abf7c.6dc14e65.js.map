{"version":3,"sources":["renderer/worker/index.ts","renderer/worker/quad.ts","../node_modules/@talenfisher/dtype/index.js","../node_modules/ndarray-gradient/fdg.js"],"names":["module","exports","dtype","toLowerCase","Int8Array","Int16Array","Int32Array","Uint8Array","Uint16Array","Uint32Array","Float32Array","Float64Array","Array","Uint8ClampedArray"],"mappings":"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","file":"worker.f20abf7c.6dc14e65.js","sourceRoot":"../src","sourcesContent":["import { mallocFloat, free } from \"typedarray-pool\";\nimport { TypedArray } from \"../../data-types\";\nimport Quad from \"./quad\";\n\nimport dtype from \"@talenfisher/dtype\";\nimport ndarray from \"ndarray\";\nimport gradient from \"ndarray-gradient\";\n\nimport Axis from \"../../axis\";\n\nconst EPSILON = 0.0001;\nconst MULTIPLY = 5;\n\ninterface WorkerOptions {\n    pointBuffer: ArrayBuffer;\n    axes: { x: Axis, y: Axis, z: Axis };\n    origin: string;\n}\n\nfunction nextPow2(value: number) {\n    return Math.pow(2, Math.ceil(Math.log(value) / Math.log(2)));\n}\n\nclass WorkerUtil {\n    private coords: ndarray;\n    private origin: string;\n    private vertexCount: number = 0;\n    private elementCount: number = 0;\n    private pointBuffer: ArrayBuffer;\n    private axes: Axis[] = [];\n    private dataLength: number;\n    private coordBuffer?: TypedArray;\n    private gradient?: ndarray;\n\n    private shape: number[];\n    private lo = [ Infinity, Infinity, Infinity ];\n    private hi = [ -Infinity, -Infinity, -Infinity ];\n\n    constructor(options: WorkerOptions) {\n        this.pointBuffer = options.pointBuffer;\n        this.origin = options.origin;\n        this.axes = [\n            options.axes.x,\n            options.axes.y,\n            options.axes.z,\n        ];\n\n        this.shape = [ this.axes[0].size, this.axes[1].size, 3 ];\n        this.dataLength = this.shape[0] * this.shape[1] * this.shape[2];\n        this.coords = ndarray(mallocFloat(this.dataLength), this.shape);\n\n        let name = this.axes[2].dataType.name || \"d\";\n        let type = dtype(name);\n        \n        if(!type) {\n            throw new Error(`Could not find data type '${type}'`);\n        }\n\n        let data = new (type as any)(this.pointBuffer);\n        const ix = this.axes[0].increment / EPSILON;\n        const iy = this.axes[1].increment / EPSILON;\n        \n        const pox = this.origin[1].toLowerCase();\n        const poy = this.origin[0].toLowerCase();\n\n        const ox = pox === \"e\" ? 0 : this.shape[0];\n        const oy = poy === \"n\" ? 0 : this.shape[1];\n\n        this.lo = [ 0, 0, Infinity ];\n        this.hi = [ this.shape[0] * ix, this.shape[1] * iy, -Infinity ];\n        \n        let cv = -1;\n        for(let i = 0; i < data.length; i++) {\n            const u = i % this.shape[0];\n            const v = ((u === 0) ? ++cv : cv) % this.shape[1];\n            \n            const x = Math.abs(ox - u) * ix;\n            const y = Math.abs(oy - v) * iy;\n            const z = (data[i] / EPSILON) * MULTIPLY;\n\n            this.coords.set(u, v, 0, x);\n            this.coords.set(u, v, 1, y);\n            this.coords.set(u, v, 2, z);\n\n            if(!isNaN(data[i]) && isFinite(data[i])) {\n                this.lo[2] = Math.min(this.lo[2], data[i]);\n                this.hi[2] = Math.max(this.hi[2], data[i]);\n            }\n        }\n        \n        this.buffer();\n    }\n\n    public dispose() {\n        free(this.coordBuffer);\n        free(this.coords.data);\n    }\n\n    private setupGradient() {\n        let shape = [ 3, this.shape[0], this.shape[1], 2 ];\n        this.gradient = ndarray(mallocFloat(this.dataLength * 2), shape);\n\n        for(let i = 0; i < 3; i++) {\n            gradient(this.gradient.pick(i), this.coords.pick(null, null, i));\n        }\n    }\n\n    private getNormal(x: number, y: number) {\n        if(!this.gradient) return;\n\n        let dxdu = this.gradient.get(0, x, y, 0);\n        let dxdv = this.gradient.get(0, x, y, 1);\n        let dydu = this.gradient.get(1, x, y, 0);\n        let dydv = this.gradient.get(1, x, y, 1);\n        let dzdu = this.gradient.get(2, x, y, 0);\n        let dzdv = this.gradient.get(2, x, y, 1);\n\n        let nx = dydu * dzdv - dydv * dzdu;\n        let ny = dzdu * dxdv - dzdv * dxdu;\n        let nz = dxdu * dydv - dxdv * dydu;\n\n        let nl = Math.sqrt(Math.pow(nx, 2) + Math.pow(ny, 2) + Math.pow(nz, 2));\n        if(nl < 1e-8) {\n            nl = Math.max(Math.abs(nx), Math.abs(ny), Math.abs(nz));\n            \n            if(nl < 1e-8) {\n                nz = 1.0;\n                ny = nx = 0.0;\n                nl = 1.0;\n            } else {\n                nl = 1.0 / nl;\n            }\n        } else {\n            nl = 1.0 / Math.sqrt(nl);\n        }\n\n        return [ \n            nx * nl, \n            ny * nl, \n            nz * nl,\n        ];\n    }\n\n    private buffer() {\n        this.setupGradient();\n\n        this.elementCount = 0;\n        this.vertexCount = 0;\n\n        let ptr = 0;\n        let count = (this.shape[0] - 1) * (this.shape[1] - 1) * 6;\n        this.coordBuffer = mallocFloat(nextPow2(8 * count));\n\n        i_loop: for(let i = 0; i < this.shape[0] - 1; i++) {\n            j_loop: for(let j = 0; j < this.shape[1] - 1; j++) {\n                \n                // skip if any vertices in the quadrilateral are undefined\n                for(let dx = 0; dx < 2; dx++) {\n                    for(let dy = 0; dy < 2; dy++) {\n                        let val = this.coords.get(1 + i + dx, 1 + j + dy, 2);\n                        if(isNaN(val) || !isFinite(val)) continue j_loop;\n                    }\n                }\n\n                let tu = i / this.shape[0];\n                let tv = j / this.shape[1];\n                \n                for(let k = 0; k < 6; k++) {\n                    let ix = i + Quad[k][0];\n                    let iy = j + Quad[k][1];\n                    \n                    this.coordBuffer[ptr++] = this.coords.get(ix, iy, 0);\n                    this.coordBuffer[ptr++] = this.coords.get(ix, iy, 1);\n                    this.coordBuffer[ptr++] = this.coords.get(ix, iy, 2);\n\n                    let normal = this.getNormal(ix, iy) as number[];\n                    this.coordBuffer[ptr++] = normal[0];\n                    this.coordBuffer[ptr++] = normal[1];\n                    this.coordBuffer[ptr++] = normal[2];\n\n                    this.coordBuffer[ptr++] = tu;\n                    this.coordBuffer[ptr++] = tv;\n                    this.vertexCount++;\n                }\n            }\n\n            postMessage({ progress: i / this.shape[0] });\n        }\n\n        this.elementCount = ptr;\n        \n        let grad = this.gradient as ndarray;\n        free(grad.data);\n    }\n\n    public get result() {\n        return {\n            vertexCount: this.vertexCount,\n            elementCount: this.elementCount,\n            buffer: this.coordBuffer,\n            shape: [ this.coords.shape[0], this.coords.shape[1] ],\n            bounds: [ this.lo, this.hi ],\n        };\n    }\n}\n\nonmessage = (e) => {\n    let util = new WorkerUtil(e.data);\n    \n    let result = util.result;\n    let message = Object.assign({ progress: 1 }, result);\n    let transferables = [\n        (result.buffer as TypedArray).buffer,\n    ];\n    \n    postMessage(message, transferables);\n    close();\n};\n","export default [\n    [0, 0],\n    [0, 1],\n    [1, 0],\n    [1, 1],\n    [1, 0],\n    [0, 1],\n];\n","module.exports = function(dtype) {\n  switch (dtype.toLowerCase()) {\n    case 'int8':\n      return Int8Array\n\n    case 'i':\n    case 'int16':\n      return Int16Array\n\n    case 'l':\n    case 'int32':\n      return Int32Array\n\n    case 'uint8':\n      return Uint8Array\n\n    case 'uint16':\n      return Uint16Array\n\n    case 'uint32':\n      return Uint32Array\n    \n    case 'f':\n    case 'float32':\n      return Float32Array\n\n    case 'd':\n    case 'float64':\n      return Float64Array\n\n    case 'array':\n      return Array\n\n    case 'uint8_clamped':\n      return Uint8ClampedArray\n  }\n}\n","'use strict'\n\nmodule.exports      = gradient\n\nvar dup             = require('dup')\nvar cwiseCompiler   = require('cwise-compiler')\n\nvar TEMPLATE_CACHE  = {}\nvar GRADIENT_CACHE  = {}\n\nvar EmptyProc = {\n  body: \"\",\n  args: [],\n  thisVars: [],\n  localVars: []\n}\n\nvar centralDiff = cwiseCompiler({\n  args: [ 'array', 'array', 'array' ],\n  pre: EmptyProc,\n  post: EmptyProc,\n  body: {\n    args: [ {\n      name: 'out', \n      lvalue: true,\n      rvalue: false,\n      count: 1\n    }, {\n      name: 'left', \n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }, {\n      name: 'right', \n      lvalue: false,\n      rvalue: true,\n      count: 1\n    }],\n    body: \"out=0.5*(left-right)\",\n    thisVars: [],\n    localVars: []\n  },\n  funcName: 'cdiff'\n})\n\nvar zeroOut = cwiseCompiler({\n  args: [ 'array' ],\n  pre: EmptyProc,\n  post: EmptyProc,\n  body: {\n    args: [ {\n      name: 'out', \n      lvalue: true,\n      rvalue: false,\n      count: 1\n    }],\n    body: \"out=0\",\n    thisVars: [],\n    localVars: []\n  },\n  funcName: 'zero'\n})\n\nfunction generateTemplate(d) {\n  if(d in TEMPLATE_CACHE) {\n    return TEMPLATE_CACHE[d]\n  }\n  var code = []\n  for(var i=0; i<d; ++i) {\n    code.push('out', i, 's=0.5*(inp', i, 'l-inp', i, 'r);')\n  }\n  var args = [ 'array' ]\n  var names = ['junk']\n  for(var i=0; i<d; ++i) {\n    args.push('array')\n    names.push('out' + i + 's')\n    var o = dup(d)\n    o[i] = -1\n    args.push({\n      array: 0,\n      offset: o.slice()\n    })\n    o[i] = 1\n    args.push({\n      array: 0,\n      offset: o.slice()\n    })\n    names.push('inp' + i + 'l', 'inp' + i + 'r')\n  }\n  return TEMPLATE_CACHE[d] = cwiseCompiler({\n    args: args,\n    pre:  EmptyProc,\n    post: EmptyProc,\n    body: {\n      body: code.join(''),\n      args: names.map(function(n) {\n        return {\n          name: n,\n          lvalue: n.indexOf('out') === 0,\n          rvalue: n.indexOf('inp') === 0,\n          count: (n!=='junk')|0\n        }\n      }),\n      thisVars: [],\n      localVars: []\n    },\n    funcName: 'fdTemplate' + d\n  })\n}\n\nfunction generateGradient(boundaryConditions) {\n  var token = boundaryConditions.join()\n  var proc = GRADIENT_CACHE[token]\n  if(proc) {\n    return proc\n  }\n\n  var d = boundaryConditions.length\n  var code = ['function gradient(dst,src){var s=src.shape.slice();' ]\n  \n  function handleBoundary(facet) {\n    var cod = d - facet.length\n\n    var loStr = []\n    var hiStr = []\n    var pickStr = []\n    for(var i=0; i<d; ++i) {\n      if(facet.indexOf(i+1) >= 0) {\n        pickStr.push('0')\n      } else if(facet.indexOf(-(i+1)) >= 0) {\n        pickStr.push('s['+i+']-1')\n      } else {\n        pickStr.push('-1')\n        loStr.push('1')\n        hiStr.push('s['+i+']-2')\n      }\n    }\n    var boundStr = '.lo(' + loStr.join() + ').hi(' + hiStr.join() + ')'\n    if(loStr.length === 0) {\n      boundStr = ''\n    }\n        \n    if(cod > 0) {\n      code.push('if(1') \n      for(var i=0; i<d; ++i) {\n        if(facet.indexOf(i+1) >= 0 || facet.indexOf(-(i+1)) >= 0) {\n          continue\n        }\n        code.push('&&s[', i, ']>2')\n      }\n      code.push('){grad', cod, '(src.pick(', pickStr.join(), ')', boundStr)\n      for(var i=0; i<d; ++i) {\n        if(facet.indexOf(i+1) >= 0 || facet.indexOf(-(i+1)) >= 0) {\n          continue\n        }\n        code.push(',dst.pick(', pickStr.join(), ',', i, ')', boundStr)\n      }\n      code.push(');')\n    }\n\n    for(var i=0; i<facet.length; ++i) {\n      var bnd = Math.abs(facet[i])-1\n      var outStr = 'dst.pick(' + pickStr.join() + ',' + bnd + ')' + boundStr\n      switch(boundaryConditions[bnd]) {\n\n        case 'clamp':\n          var cPickStr = pickStr.slice()\n          var dPickStr = pickStr.slice()\n          if(facet[i] < 0) {\n            cPickStr[bnd] = 's[' + bnd + ']-2'\n          } else {\n            dPickStr[bnd] = '1'\n          }\n          if(cod === 0) {\n            code.push('if(s[', bnd, ']>1){dst.set(',\n              pickStr.join(), ',', bnd, ',0.5*(src.get(',\n                cPickStr.join(), ')-src.get(',\n                dPickStr.join(), ')))}else{dst.set(',\n              pickStr.join(), ',', bnd, ',0)};')\n          } else {\n            code.push('if(s[', bnd, ']>1){diff(', outStr, \n                ',src.pick(', cPickStr.join(), ')', boundStr, \n                ',src.pick(', dPickStr.join(), ')', boundStr, \n                ');}else{zero(', outStr, ');};')\n          }\n        break\n\n        case 'mirror':\n          if(cod === 0) {\n            code.push('dst.set(', pickStr.join(), ',', bnd, ',0);')\n          } else {\n            code.push('zero(', outStr, ');')\n          }\n        break\n\n        case 'wrap':\n          var aPickStr = pickStr.slice()\n          var bPickStr = pickStr.slice()\n          if(facet[i] < 0) {\n            aPickStr[bnd] = 's[' + bnd + ']-2'\n            bPickStr[bnd] = '0'\n            \n          } else {\n            aPickStr[bnd] = 's[' + bnd + ']-1'\n            bPickStr[bnd] = '1'\n          }\n          if(cod === 0) {\n            code.push('if(s[', bnd, ']>2){dst.set(',\n              pickStr.join(), ',', bnd, ',0.5*(src.get(',\n                aPickStr.join(), ')-src.get(',\n                bPickStr.join(), ')))}else{dst.set(',\n              pickStr.join(), ',', bnd, ',0)};')\n          } else {\n            code.push('if(s[', bnd, ']>2){diff(', outStr, \n                ',src.pick(', aPickStr.join(), ')', boundStr, \n                ',src.pick(', bPickStr.join(), ')', boundStr, \n                ');}else{zero(', outStr, ');};')\n          }\n        break\n\n        default:\n          throw new Error('ndarray-gradient: Invalid boundary condition')\n      }\n    }\n\n    if(cod > 0) {\n      code.push('};')\n    }\n  }\n\n  //Enumerate ridges, facets, etc. of hypercube\n  for(var i=0; i<(1<<d); ++i) {\n    var faces = []\n    for(var j=0; j<d; ++j) {\n      if(i & (1<<j)) {\n        faces.push(j+1)\n      }\n    }\n    for(var k=0; k<(1<<faces.length); ++k) {\n      var sfaces = faces.slice()\n      for(var j=0; j<faces.length; ++j) {\n        if(k & (1<<j)) {\n          sfaces[j] = -sfaces[j]\n        }\n      }\n      handleBoundary(sfaces)\n    }\n  }\n\n  code.push('return dst;};return gradient')\n\n  //Compile and link routine, save cached procedure\n  var linkNames = [ 'diff', 'zero' ]\n  var linkArgs  = [ centralDiff, zeroOut ]\n  for(var i=1; i<=d; ++i) {\n    linkNames.push('grad' + i)\n    linkArgs.push(generateTemplate(i))\n  }\n  linkNames.push(code.join(''))\n\n  var link = Function.apply(void 0, linkNames)\n  var proc = link.apply(void 0, linkArgs)\n  TEMPLATE_CACHE[token] = proc\n  return proc\n}\n\nfunction gradient(out, inp, bc) {\n  if(Array.isArray(bc)) {\n    if(bc.length !== inp.dimension) {\n      throw new Error('ndarray-gradient: invalid boundary conditions')\n    }\n  } else if(typeof bc === 'string') {\n    bc = dup(inp.dimension, bc)\n  } else {\n    bc = dup(inp.dimension, 'clamp')\n  }\n  if(out.dimension !== inp.dimension + 1) {\n    throw new Error('ndarray-gradient: output dimension must be +1 input dimension')\n  }\n  if(out.shape[inp.dimension] !== inp.dimension) {\n    throw new Error('ndarray-gradient: output shape must match input shape')\n  }\n  for(var i=0; i<inp.dimension; ++i) {\n    if(out.shape[i] !== inp.shape[i]) {\n      throw new Error('ndarray-gradient: shape mismatch')\n    }\n  }\n  if(inp.size === 0) {\n    return out\n  }\n  if(inp.dimension <= 0) {\n    out.set(0)\n    return out\n  }\n  var cached = generateGradient(bc)\n  return cached(out, inp)\n}"]}